import { DataModel } from "@phosphor/datagrid";
import { ALL_TYPES } from '../dataTypes';
import { DataFormatter } from '../DataFormatter';
import IDataModelState from '../interface/IDataGridModelState';
import { MapIterator } from '@phosphor/algorithm';
import { IColumn } from "../interface/IColumn";
import ColumnManager from "../column/ColumnManager";
import RowManager from "../row/RowManager";
import { BeakerXDataStore } from "../store/BeakerXDataStore";
export declare class BeakerXDataGridModel extends DataModel {
    store: BeakerXDataStore;
    dataFormatter: DataFormatter;
    columnManager: ColumnManager;
    rowManager: RowManager;
    headerRowsCount: number;
    static DEFAULT_INDEX_COLUMN_TYPE: string;
    private _data;
    constructor(store: BeakerXDataStore, columnManager: ColumnManager, rowManager: RowManager);
    destroy(): void;
    reset(): void;
    emitChanged(args: DataModel.ChangedArgs): void;
    addProperties(store: BeakerXDataStore, columnManager: ColumnManager, rowManager: RowManager): void;
    updateData(state: IDataModelState): void;
    rowCount(region: DataModel.RowRegion): number;
    columnCount(region: DataModel.ColumnRegion): number;
    data(region: DataModel.CellRegion, row: number, position: number): any;
    metadata(region: DataModel.CellRegion, position: number): DataModel.Metadata;
    setState(state: any): void;
    setFilterHeaderVisible(visible: boolean): void;
    getColumnValuesIterator(column: IColumn): MapIterator<number, number>;
    setHeaderTextVertical(headersVertical: boolean): void;
    getColumnValueResolver(dataType: ALL_TYPES): Function;
    private htmlTextContentResolver;
    private dateValueResolver;
    private defaultValueResolver;
    private doubleValueResolver;
    private integerValueResolver;
}
