import DataGridRow from "./DataGridRow";
import { MapIterator } from '@phosphor/algorithm';
import DataGridColumn from "../column/DataGridColumn";
import ColumnManager from "../column/ColumnManager";
import { COLUMN_TYPES, SORT_ORDER } from "../column/enums";
export default class RowManager {
    rowsIterator: MapIterator<any[], DataGridRow>;
    rows: DataGridRow[];
    filterExpression: string;
    expressionVars: string;
    sortedBy: DataGridColumn;
    columnManager: ColumnManager;
    rowsToShow: number;
    constructor(data: any[], hasIndex: boolean, columnManager: ColumnManager);
    destroy(): void;
    createRows(data: any, hasIndex: any): void;
    createRowsWithGeneratedIndex(data: any): void;
    createRowsWithIndex(data: any): void;
    getRow(index: any): DataGridRow;
    sortByColumn(column: DataGridColumn): void;
    sortRows(column: DataGridColumn, sortOrder: SORT_ORDER, valueResolver?: Function): void;
    private compareSortedValues;
    resetSorting(): void;
    defaultValueResolver(row: DataGridRow, columnIndex: number): any;
    indexValueResolver(row: any, columnIndex: number): any;
    createFilterExpressionVars(): void;
    searchRows(): void;
    filterRows(evalFn?: Function): void;
    takeRows(start: number, end: number): DataGridRow[];
    createFilterExpression(): void;
    evaluateFilterExpression(row: any, formatFns: any): any;
    evaluateSearchExpression(row: any, formatFns: any): any;
    getValueByColumn(row: number, columnIndex: number, columnType: COLUMN_TYPES): any;
    setRowsToShow(rows: any): void;
}
